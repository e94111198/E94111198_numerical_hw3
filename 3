import numpy as np
from scipy.interpolate import CubicHermiteSpline
from scipy.optimize import minimize_scalar, root_scalar

time_points = np.array([0, 3, 5, 8, 13])
distance_points = np.array([0, 200, 375, 620, 990])
velocity_points = np.array([75, 77, 80, 74, 72])

spline = CubicHermiteSpline(time_points, distance_points, velocity_points)

# (a) 
time_query = 10
position_at_t = spline(time_query)
speed_at_t = spline.derivative()(time_query)

print("Question (a):")
print(f"At t = {time_query}s: Position = {position_at_t:.2f} ft, Speed = {speed_at_t:.2f} ft/s")

# (b)
def speed_threshold(t):
    return spline.derivative()(t) - 80.67

try:
    crossing_time = root_scalar(speed_threshold, bracket=[3, 3.5], method='brentq').root
    print("\nQuestion (b):")
    print(f"The car first exceeds 55 mi/h at t = {crossing_time:.2f} s")
except ValueError:
    print("\nQuestion (b):")
    print("Error: Could not determine when speed exceeds 55 mi/h")

# (c) 
opt_result = minimize_scalar(lambda t: -spline.derivative()(t), bounds=(time_points[0], time_points[-1]), method='bounded')
peak_speed = -opt_result.fun
peak_time = opt_result.x

print("\n Question (c):")
print(f"Maximum Speed = {peak_speed:.2f} ft/s at t = {peak_time:.2f} s")
